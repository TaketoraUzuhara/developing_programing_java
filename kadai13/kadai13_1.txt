Kadai13　レポート
18D8101028G　渦原竹虎


それぞれのファイルの役割

ReversiServer.java：
プレイヤーの情報を管理するサーバーを作り出す。
ReversiClient.javaで行われた処理を常に監視し、それぞれのプレイヤーに対して情報を伝達する。
また、各プレイヤーに関する初期情報（最初に入ってきたプレイヤーが黒、後から入ってきたプレイヤーが白）の設定などもこのサーバーで行う。
このファイルでの具体的な情報管理は以下に示す。
・接続されたクライアントに対してメッセージを送信。または、特定のクライアントに対して送信。
・クライアントの接続管理。接続が確認されると、現在接続されているクライアント数を確認し、定員に達していないか調べる。
ゲームの途中でプレイヤー（クライアント）接続が確認できなくなった場合は、ゲームを中断し終了させるように監視する。
・各プレイヤーの接続状況、入力処理情報を監視し、必要に応じて各クライアントに伝達する。

ReversiClient.java：
文字通り、クライアント（プレイヤー）サイドの情報を取り扱う。
ReversiServer.javaで作成したサーバーと接続することで、他のクライアントの情報を受信、送信することができる。
基本的なリバーシブルのゲーム処理はこちらで行う。
具体的な処理を以下に示す。
・これまでに作成したリバーシブルのゲームを行うプラットフォームを作り出す。
・プラットフォームの情報はクリックをするたびに対戦相手のプラットフォームにもサーバーを通じて伝達する。
これを行うことで、二人のプレイヤーのリバーシブル情報が同一のものとなる。
・どちらの手番かは変数turnを利用し、プレイヤーは自身の色とturnに代入されている数値が表す色とが一致しているかで
手番を把握する。
処理としては、自分の手番の場合はクリック処理を実行するが、そうでない場合はクリックをしてもプログラムが進まないように処理している。
・リバーシブルゲーム内のルールに関する処理（勝敗判定、パス判定）は、盤面を評価する処理を、クリックするたびに行い判定する。
これに関しては常にプレイヤー同士で情報を共有しているため、自分の手番でなくても、相手のターンでパス判定または勝敗判定が行われた場合、
自身にも情報が共有されるため、適切に設定されたメッセージを各プレイヤーのウィンドウに表示させたり、盤面を常に共有している状態を保つことができる。
勝敗判定やパス判定は、これまでの処理を利用したうえで、今回はアクションメッセージを生成することで、各プレイヤーに処理内容をメッセージとして
与えることで判断している。例えば、「set 1 7 1」というメッセージが１のプレイヤーで生成された場合、それを２のプレイヤーへ
送信することで、２のプレイヤーは１のプレイヤーがどこの場所に石を設置したのかを確認し、自身の盤面にもその情報を適応させる。
勝敗判定や、パス判定も同様に行っている。

まとめ：
ReversiClientでリバーシブルゲームというプラットフォームを作成し、ReversiServerでプラットフォーム同士をつなぎ
情報を共有させることで、二つのプラットフォームで対戦することができる。